{
    "x-generator": "NSwag v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))",
    "openapi": "3.0.0",
    "info": {
      "title": "GZCTF Server API",
      "description": "GZCTF Server API Document",
      "version": "v1"
    },
    "paths": {
      "/api/account/register": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User registration",
          "description": "Use this API to register a new user. In development environment, no verification. Email URL: /verify",
          "operationId": "Account_Register",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Registration successful",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponseOfRegisterStatus"
                  }
                }
              }
            },
            "400": {
              "description": "Validation failed or user already exists",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/recovery": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User password recovery request",
          "description": "Use this API to request password recovery. Sends an email to the user. Email URL: /reset",
          "operationId": "Account_Recovery",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecoveryModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Password reset email sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "User does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Validation failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/passwordreset": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User password reset",
          "description": "Use this API to reset the password. Email verification code is required.",
          "operationId": "Account_PasswordReset",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Password reset successfully"
            },
            "400": {
              "description": "Validation failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/verify": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User email confirmation",
          "description": "Use this API to confirm email using the verification code.",
          "operationId": "Account_Verify",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountVerifyModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Email verified successfully"
            },
            "400": {
              "description": "Validation failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Email verification failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/login": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User login",
          "description": "Use this API to log in to the account.",
          "operationId": "Account_LogIn",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Login successful"
            },
            "401": {
              "description": "Incorrect username or password",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/logout": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User logout",
          "description": "Use this API to log out of the account. User permissions required.",
          "operationId": "Account_LogOut",
          "responses": {
            "200": {
              "description": "Logged out successfully"
            }
          }
        }
      },
      "/api/account/update": {
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "User data update",
          "description": "Use this API to update username and description. User permissions required.",
          "operationId": "Account_Update",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileUpdateModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "User data updated successfully"
            },
            "400": {
              "description": "Validation failed or user data update failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/changepassword": {
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "User password change",
          "description": "Use this API to change user's password. User permissions required.",
          "operationId": "Account_ChangePassword",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordChangeModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Password changed successfully"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/changeemail": {
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "User email change",
          "description": "Use this API to change user's email. User permissions required. Email URL: /confirm",
          "operationId": "Account_ChangeEmail",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailChangeModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Email change email sent successfully. Boolean indicates whether email verification is required",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponseOfBoolean"
                  }
                }
              }
            },
            "400": {
              "description": "Validation failed or email already in use",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/mailchangeconfirm": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "User email change confirmation",
          "description": "Use this API to confirm email change. Email verification code required. User permissions required.",
          "operationId": "Account_MailChangeConfirm",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountVerifyModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Email changed successfully"
            },
            "400": {
              "description": "Validation failed or invalid email",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/profile": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Get user information",
          "description": "Use this API to get user information. User permissions required.",
          "operationId": "Account_Profile",
          "responses": {
            "200": {
              "description": "User information retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProfileUserInfoModel"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/account/avatar": {
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "Update user avatar",
          "description": "Use this API to update user's avatar. User permissions required.",
          "operationId": "Account_Avatar",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User avatar URL",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/config": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get configuration",
          "description": "Use this API to get global settings, requires Admin permission",
          "operationId": "Admin_GetConfigs",
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Global configuration",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConfigEditModel"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Admin"
          ],
          "summary": "Change configuration",
          "description": "Use this API to change global settings, requires Admin permission",
          "operationId": "Admin_UpdateConfigs",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigEditModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Update successful"
            }
          }
        }
      },
      "/api/admin/config/logo": {
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Change platform Logo",
          "description": "Use this API to change the platform Logo, requires Admin permission",
          "operationId": "Admin_UpdateLogo",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Update successful"
            }
          }
        },
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Reset platform Logo",
          "description": "Use this API to reset the platform Logo, requires Admin permission",
          "operationId": "Admin_ResetLogo",
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Updated successfully"
            }
          }
        }
      },
      "/api/admin/users": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all users",
          "description": "Use this API to get all users, requires Admin permission",
          "operationId": "Admin_Users",
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "maximum": 500.0,
                "minimum": 0.0
              },
              "x-position": 1
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "User list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfUserInfoModel"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Add users in batch",
          "description": "Use this API to add users in batch, requires Admin permission",
          "operationId": "Admin_AddUsers",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCreateModel"
                  }
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added"
            },
            "400": {
              "description": "User validation failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/users/search": {
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Search users",
          "description": "Use this API to search users, requires Admin permission",
          "operationId": "Admin_SearchUsers",
          "parameters": [
            {
              "name": "hint",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "User list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfUserInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/teams": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all team information",
          "description": "Use this API to get all teams, requires Admin permission",
          "operationId": "Admin_Teams",
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "maximum": 500.0,
                "minimum": 0.0
              },
              "x-position": 1
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "User list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfTeamInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/teams/search": {
        "post": {
          "tags": [
            "Admin"
          ],
          "summary": "Search teams",
          "description": "Use this API to search teams, requires Admin permission",
          "operationId": "Admin_SearchTeams",
          "parameters": [
            {
              "name": "hint",
              "in": "query",
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "User list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfTeamInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/teams/{id}": {
        "put": {
          "tags": [
            "Admin"
          ],
          "summary": "Modify team information",
          "description": "Use this API to modify team information, requires Admin permission",
          "operationId": "Admin_UpdateTeam",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTeamModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated"
            },
            "404": {
              "description": "Team not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Delete team",
          "description": "Use this API to delete team, requires Admin permission",
          "operationId": "Admin_DeleteTeam",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/users/{userid}": {
        "put": {
          "tags": [
            "Admin"
          ],
          "summary": "Modify user information",
          "description": "Use this API to modify user information, requires Admin permission",
          "operationId": "Admin_UpdateUserInfo",
          "parameters": [
            {
              "name": "userid",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserInfoModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated"
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Delete user",
          "description": "Use this API to delete user, requires Admin permission",
          "operationId": "Admin_DeleteUser",
          "parameters": [
            {
              "name": "userid",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "guid"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get user information",
          "description": "Use this API to get user information, requires Admin permission",
          "operationId": "Admin_UserInfo",
          "parameters": [
            {
              "name": "userid",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "User object",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProfileUserInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/users/{userid}/password": {
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Reset user password",
          "description": "Use this API to reset user password, requires Admin permission",
          "operationId": "Admin_ResetPassword",
          "parameters": [
            {
              "name": "userid",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/logs": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all logs",
          "description": "Use this API to get all logs, requires Admin permission",
          "operationId": "Admin_Logs",
          "parameters": [
            {
              "name": "level",
              "in": "query",
              "schema": {
                "type": "string",
                "default": "All",
                "nullable": true
              },
              "x-position": 1
            },
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 50,
                "maximum": 1000.0,
                "minimum": 0.0
              },
              "x-position": 2
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 3
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Log list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LogMessageModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/participation/{id}": {
        "put": {
          "tags": [
            "Admin"
          ],
          "summary": "Update participation status",
          "description": "Use this API to update team participation status, review application, requires Admin permission",
          "operationId": "Admin_Participation",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationEditModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Update successful"
            },
            "404": {
              "description": "Participation object not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/writeups/{id}": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all Writeup basic information",
          "description": "Use this API to get Writeup basic information, requires Admin permission",
          "operationId": "Admin_Writeups",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Update successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WriteupInfoModel"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/writeups/{id}/all": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Download all Writeups",
          "description": "Use this API to download all Writeups, requires Admin permission",
          "operationId": "Admin_DownloadAllWriteups",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Downloaded successfully"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/instances": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all container instances",
          "description": "Use this API to get all container instances, requires Admin permission",
          "operationId": "Admin_Instances",
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Instance list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfContainerInstanceModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/instances/{id}": {
        "delete": {
          "tags": [
            "Admin"
          ],
          "summary": "Delete container instance",
          "description": "Use this API to forcibly delete container instance, requires Admin permission",
          "operationId": "Admin_DestroyInstance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "guid"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved"
            },
            "400": {
              "description": "Container instance destruction failed",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Container instance not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/admin/files": {
        "get": {
          "tags": [
            "Admin"
          ],
          "summary": "Get all files",
          "description": "Use this API to get all files, requires Admin permission",
          "operationId": "Admin_Files",
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 50,
                "maximum": 500.0,
                "minimum": 0.0
              },
              "x-position": 1
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "File list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfLocalFile"
                  }
                }
              }
            }
          }
        }
      },
      "/assets/{hash}/{filename}": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "File retrieval interface",
          "description": "Retrieve a file by hash, filename is not matched",
          "operationId": "Assets_GetFile",
          "parameters": [
            {
              "name": "hash",
              "in": "path",
              "required": true,
              "description": "File hash",
              "schema": {
                "type": "string",
                "pattern": "[0-9a-f]{64}"
              },
              "x-position": 1
            },
            {
              "name": "filename",
              "in": "path",
              "required": true,
              "description": "Download filename",
              "schema": {
                "type": "string"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "File retrieved successfully"
            },
            "404": {
              "description": "File not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Failed to retrieve file",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/assets": {
        "post": {
          "tags": [
            "Assets"
          ],
          "summary": "File upload interface",
          "description": "Upload one or more files",
          "operationId": "Assets_Upload",
          "parameters": [
            {
              "name": "filename",
              "in": "query",
              "description": "Unified filename",
              "schema": {
                "type": "string",
                "nullable": true
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "files": {
                      "type": "array",
                      "nullable": true,
                      "items": {
                        "type": "string",
                        "format": "binary"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access denied",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "File(s) uploaded successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LocalFile"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Failed to upload file(s)",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/assets/{hash}": {
        "delete": {
          "tags": [
            "Assets"
          ],
          "summary": "File deletion interface",
          "description": "Delete a file by hash",
          "operationId": "Assets_Delete",
          "parameters": [
            {
              "name": "hash",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access denied",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "File deleted successfully"
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProblemDetails"
                  }
                }
              }
            },
            "400": {
              "description": "Failed to delete file",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/posts": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Add Post",
          "description": "Adding a post requires administrator privileges",
          "operationId": "Edit_AddPost",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added post",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/posts/{id}": {
        "put": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Post",
          "description": "Updating a post requires administrator privileges",
          "operationId": "Edit_UpdatePost",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Post ID",
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated post",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PostDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "Post not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete Post",
          "description": "Deleting a post requires administrator privileges",
          "operationId": "Edit_DeletePost",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Post ID",
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted post"
            },
            "404": {
              "description": "Post not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Add Game",
          "description": "Adding a game requires administrator privileges",
          "operationId": "Edit_AddGame",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameInfoModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added game",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Edit"
          ],
          "summary": "Get Game List",
          "description": "Retrieving the game list requires administrator privileges",
          "operationId": "Edit_GetGames",
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "maximum": 100.0,
                "minimum": 0.0
              },
              "x-position": 1
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game list",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfGameInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}": {
        "get": {
          "tags": [
            "Edit"
          ],
          "summary": "Get Game",
          "description": "Retrieving a game requires administrator privileges",
          "operationId": "Edit_GetGame",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Game",
          "description": "Updating a game requires administrator privileges",
          "operationId": "Edit_UpdateGame",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameInfoModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated game",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete Game",
          "description": "Deleting a game requires administrator privileges",
          "operationId": "Edit_DeleteGame",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted game",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/writeups": {
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete All WriteUps",
          "description": "Deleting all WriteUps for a game requires administrator privileges",
          "operationId": "Edit_DeleteGameWriteUps",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted game WriteUps",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/poster": {
        "put": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Game Poster",
          "description": "Use this endpoint to update the game poster; administrator privileges required",
          "operationId": "Edit_UpdateGamePoster",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Game poster URL",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/notices": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Add Game Notice",
          "description": "Adding a game notice requires administrator privileges",
          "operationId": "Edit_AddGameNotice",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "description": "Notice content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNoticeModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added game notice",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameNotice"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Edit"
          ],
          "summary": "Get Game Notices",
          "description": "Retrieving game notices requires administrator privileges",
          "operationId": "Edit_GetGameNotices",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game notices",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GameNotice"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/notices/{noticeId}": {
        "put": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Game Notice",
          "description": "Updating a game notice requires administrator privileges",
          "operationId": "Edit_UpdateGameNotice",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "noticeId",
              "in": "path",
              "required": true,
              "description": "Notice ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "model",
            "description": "Notice content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNoticeModel"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated notice",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameNotice"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete Game Notice",
          "description": "Deleting a game notice requires administrator privileges",
          "operationId": "Edit_DeleteGameNotice",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "noticeId",
              "in": "path",
              "required": true,
              "description": "Post ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted post"
            },
            "404": {
              "description": "Post not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Add Game Challenge",
          "description": "Adding a game challenge requires administrator privileges",
          "operationId": "Edit_AddGameChallenge",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeInfoModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added game challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChallengeEditDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "tags": [
            "Edit"
          ],
          "summary": "Get All Game Challenges",
          "description": "Retrieving all game challenges requires administrator privileges",
          "operationId": "Edit_GetGameChallenges",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenges",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChallengeInfoModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/updateaccepted": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Update AC Counter for Challenges",
          "description": "Updating the accepted count for all game challenges requires administrator privileges",
          "operationId": "Edit_UpdateGameChallengesAcceptedCount",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated accepted counts"
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/{cId}": {
        "get": {
          "tags": [
            "Edit"
          ],
          "summary": "Get Game Challenge",
          "description": "Retrieving a game challenge requires administrator privileges",
          "operationId": "Edit_GetGameChallenge",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChallengeEditDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Game Challenge Information",
          "description": "Updating a game challenge, requires administrator privileges. Flags are not affected; use Flag-related APIs to modify",
          "operationId": "Edit_UpdateGameChallenge",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "model",
            "description": "Challenge information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChallengeUpdateModel"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated game challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChallengeEditDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete Game Challenge",
          "description": "Deleting a game challenge requires administrator privileges",
          "operationId": "Edit_RemoveGameChallenge",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted game challenge"
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/{cId}/container": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Test Game Challenge Container",
          "description": "Testing a game challenge container requires administrator privileges",
          "operationId": "Edit_CreateTestContainer",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully started game challenge container",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContainerInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Destroy Test Game Challenge Container",
          "description": "Destroying a test game challenge container requires administrator privileges",
          "operationId": "Edit_DestroyTestContainer",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully destroyed game challenge container"
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/{cId}/attachment": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Update Game Challenge Attachment",
          "description": "Updating a game challenge attachment requires administrator privileges; only for non-dynamic attachment challenges",
          "operationId": "Edit_UpdateAttachment",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentCreateModel"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully updated game challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/{cId}/flags": {
        "post": {
          "tags": [
            "Edit"
          ],
          "summary": "Add Game Challenge Flag",
          "description": "Adding a game challenge flag requires administrator privileges",
          "operationId": "Edit_AddFlags",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FlagCreateModel"
                  }
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully added game challenge flags"
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/edit/games/{id}/challenges/{cId}/flags/{fId}": {
        "delete": {
          "tags": [
            "Edit"
          ],
          "summary": "Delete Game Challenge Flag",
          "description": "Deleting a game challenge flag requires administrator privileges",
          "operationId": "Edit_RemoveFlag",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "cId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            },
            {
              "name": "fId",
              "in": "path",
              "required": true,
              "description": "Flag ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 3
            }
          ],
          "responses": {
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted game challenge flag",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/recent": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get the recent games",
          "description": "Retrieves recent game in three weeks",
          "operationId": "Game_RecentGames",
          "parameters": [
            {
              "name": "limit",
              "in": "query",
              "description": "Limit of the number of games",
              "schema": {
                "type": "integer",
                "format": "int32",
                "maximum": 50.0,
                "minimum": 0.0
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BasicGameInfoModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/game": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get games",
          "description": "Retrieves game information in specified range",
          "operationId": "Game_Games",
          "parameters": [
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 10,
                "maximum": 50.0,
                "minimum": 0.0
              },
              "x-position": 1
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game notices",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArrayResponseOfBasicGameInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get detailed game information",
          "description": "Retrieves detailed information about the game",
          "operationId": "Game_Game",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DetailedGameInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Game"
          ],
          "summary": "Join a game",
          "description": "Join a game; requires User permission",
          "operationId": "Game_JoinGame",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameJoinModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Unauthorized operation or invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully joined the game"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Game"
          ],
          "summary": "Leave a game",
          "description": "Leave a game; requires User permission",
          "operationId": "Game_LeaveGame",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Unauthorized operation or invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully left the game"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/scoreboard": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get the scoreboard",
          "description": "Retrieves the scoreboard data",
          "operationId": "Game_Scoreboard",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ScoreboardModel"
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/notices": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get game notices",
          "description": "Retrieves game notice data",
          "operationId": "Game_Notices",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "maximum": 100.0,
                "minimum": 0.0
              },
              "x-position": 2
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 3
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game notices",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GameNotice"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/events": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get game events",
          "description": "Retrieves game event data; requires Monitor permission",
          "operationId": "Game_Events",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "hideContainer",
              "in": "query",
              "description": "Hide container events",
              "schema": {
                "type": "boolean",
                "default": false
              },
              "x-position": 2
            },
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "maximum": 100.0,
                "minimum": 0.0
              },
              "x-position": 3
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 4
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game events",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/GameEvent"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/submissions": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get game submissions",
          "description": "Retrieves game submission data; requires Monitor permission",
          "operationId": "Game_Submissions",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "type",
              "in": "query",
              "description": "Submission type",
              "schema": {
                "oneOf": [
                  {
                    "nullable": true,
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/AnswerResult"
                      }
                    ]
                  }
                ]
              },
              "x-position": 2
            },
            {
              "name": "count",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 100,
                "maximum": 100.0,
                "minimum": 0.0
              },
              "x-position": 3
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              },
              "x-position": 4
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game submissions",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Submission"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/cheatinfo": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get game cheat information",
          "description": "Retrieves game cheat data; requires Monitor permission",
          "operationId": "Game_CheatInfo",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game cheat data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CheatInfoModel"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/games/{id}/captures": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get challenges with traffic capturing enabled",
          "description": "Retrieves challenges with traffic capturing enabled; requires Monitor permission",
          "operationId": "Game_GetChallengesWithTrafficCapturing",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved challenge list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ChallengeTrafficModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/captures/{challengeId}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get team captures in a challenge",
          "description": "Retrieves the list of captured teams for a game challenge; requires Monitor permission",
          "operationId": "Game_GetChallengeTraffic",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved file list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamTrafficModel"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Capture information not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/captures/{challengeId}/{partId}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get traffic files",
          "description": "Retrieves traffic packet files for a team and challenge; requires Monitor permission",
          "operationId": "Game_GetTeamTrafficAll",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "partId",
              "in": "path",
              "required": true,
              "description": "Team participation ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved file list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FileRecord"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/captures/{challengeId}/{partId}/all": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Download all traffic files",
          "description": "Downloads all traffic packet files for a team and challenge; requires Monitor permission",
          "operationId": "Game_GetAllTeamTraffic",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "partId",
              "in": "path",
              "required": true,
              "description": "Team participation ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved files"
            }
          }
        },
        "delete": {
          "tags": [
            "Game"
          ],
          "summary": "Deletes all traffic files",
          "description": "Deletes a team's traffic packet files for a challenge; requires Monitor permission",
          "operationId": "Game_DeleteAllTeamTraffic",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "partId",
              "in": "path",
              "required": true,
              "description": "Team participation ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted files"
            }
          }
        }
      },
      "/api/game/captures/{challengeId}/{partId}/{filename}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get a traffic file",
          "description": "Retrieves a traffic packet file; requires Monitor permission",
          "operationId": "Game_GetTeamTraffic",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "partId",
              "in": "path",
              "required": true,
              "description": "Team participation ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            },
            {
              "name": "filename",
              "in": "path",
              "required": true,
              "description": "Traffic packet filename",
              "schema": {
                "type": "string"
              },
              "x-position": 3
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved file"
            },
            "404": {
              "description": "Capture information not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Game"
          ],
          "summary": "Deletes a traffic file",
          "description": "Deletes a traffic packet file; requires Monitor permission",
          "operationId": "Game_DeleteTeamTraffic",
          "parameters": [
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "partId",
              "in": "path",
              "required": true,
              "description": "Team participation ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            },
            {
              "name": "filename",
              "in": "path",
              "required": true,
              "description": "Traffic packet filename",
              "schema": {
                "type": "string"
              },
              "x-position": 3
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted file"
            },
            "404": {
              "description": "Capture information not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/details": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get team details in a game",
          "description": "Retrieves all challenges of the game; requires User permission and active team participation",
          "operationId": "Game_ChallengesWithTeamInfo",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GameDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/participations": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get all game participations",
          "description": "Retrieves all participation information of the game; requires Admin permission",
          "operationId": "Game_Participations",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game participation information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ParticipationInfoModel"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/scoreboardsheet": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Downloads the scoreboard",
          "description": "Downloads the game scoreboard; requires Monitor permission",
          "operationId": "Game_ScoreboardSheet",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully downloaded game scoreboard"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/submissionsheet": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Downloads all submissions",
          "description": "Downloads all submissions of the game; requires Monitor permission",
          "operationId": "Game_SubmissionSheet",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully downloaded all game submissions"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/challenges/{challengeId}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get challenge information",
          "description": "Retrieves challenge information; requires User permission and active team participation",
          "operationId": "Game_GetChallenge",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChallengeDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Game"
          ],
          "summary": "Submits a flag",
          "description": "Submits a flag; requires User permission and active team participation",
          "operationId": "Game_Submit",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "requestBody": {
            "x-name": "model",
            "description": "Flag submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlagSubmitModel"
                }
              }
            },
            "required": true,
            "x-position": 3
          },
          "responses": {
            "400": {
              "description": "Invalid operation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/challenges/{challengeId}/status/{submitId}": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Queries flag status",
          "description": "Queries flag status; requires User permission",
          "operationId": "Game_Status",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            },
            {
              "name": "submitId",
              "in": "path",
              "required": true,
              "description": "Submission ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 3
            }
          ],
          "responses": {
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved submission status",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AnswerResult"
                  }
                }
              }
            },
            "404": {
              "description": "Submission not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/writeup": {
        "get": {
          "tags": [
            "Game"
          ],
          "summary": "Get writeup information",
          "description": "Retrieves post-game writeup submission information; requires User permission",
          "operationId": "Game_GetWriteup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "400": {
              "description": "Submission does not meet requirements",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully submitted writeup",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BasicWriteupInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Game"
          ],
          "summary": "Submits a writeup",
          "description": "Submits a post-game writeup; requires User permission",
          "operationId": "Game_SubmitWriteup",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "400": {
              "description": "Submission does not meet requirements",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully submitted writeup"
            },
            "404": {
              "description": "Game not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/container/{challengeId}": {
        "post": {
          "tags": [
            "Game"
          ],
          "summary": "Creates a container",
          "description": "Creates a container; requires User permission",
          "operationId": "Game_CreateContainer",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "Container creation not allowed for challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContainerInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "Challenge not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "429": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Game"
          ],
          "summary": "Deletes a container",
          "description": "Deletes a container; requires User permission",
          "operationId": "Game_DeleteContainer",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "Container creation not allowed for challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully deleted container"
            },
            "404": {
              "description": "Challenge not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "429": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/game/{id}/container/{challengeId}/extend": {
        "post": {
          "tags": [
            "Game"
          ],
          "summary": "Extends container lifetime",
          "description": "Extends container lifetime; requires User permission and can only be extended two hours within ten minutes before expiration",
          "operationId": "Game_ExtendContainerLifetime",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Game ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "challengeId",
              "in": "path",
              "required": true,
              "description": "Challenge ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "400": {
              "description": "Container not created or cannot be extended",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "200": {
              "description": "Successfully retrieved game challenge container information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ContainerInfoModel"
                  }
                }
              }
            },
            "404": {
              "description": "Challenge not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/posts/latest": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Get the latest posts",
          "description": "Get the latest posts",
          "operationId": "Info_GetLatestPosts",
          "responses": {
            "200": {
              "description": "Successfully retrieved posts",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PostInfoModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/posts": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Get all posts",
          "description": "Get all posts",
          "operationId": "Info_GetPosts",
          "responses": {
            "200": {
              "description": "Successfully retrieved posts",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PostInfoModel"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/posts/{id}": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Get post details",
          "description": "Get post details",
          "operationId": "Info_GetPost",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved post details",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PostDetailModel"
                  }
                }
              }
            },
            "404": {
              "description": "Post not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/config": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Get client configuration",
          "description": "Get client configuration",
          "operationId": "Info_GetClientConfig",
          "responses": {
            "200": {
              "description": "Successfully retrieved configuration",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientConfig"
                  }
                }
              }
            }
          }
        }
      },
      "/api/captcha": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Get Captcha configuration",
          "description": "Get Captcha configuration",
          "operationId": "Info_GetClientCaptchaInfo",
          "responses": {
            "200": {
              "description": "Successfully retrieved Captcha configuration",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ClientCaptchaInfoModel"
                  }
                }
              }
            }
          }
        }
      },
      "/api/captcha/powchallenge": {
        "get": {
          "tags": [
            "Info"
          ],
          "summary": "Create Pow Captcha",
          "description": "Create Pow Captcha, valid for 5 minutes",
          "operationId": "Info_PowChallenge",
          "responses": {
            "200": {
              "description": "Successfully retrieved Pow Challenge",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HashPowChallenge"
                  }
                }
              }
            },
            "404": {
              "description": "Pow is disabled",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/proxy/{id}": {
        "get": {
          "tags": [
            "Proxy"
          ],
          "summary": "Proxy TCP over websocket",
          "operationId": "Proxy_ProxyForInstance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Container ID",
              "schema": {
                "type": "string",
                "format": "guid"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "418": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/proxy/noinst/{id}": {
        "get": {
          "tags": [
            "Proxy"
          ],
          "summary": "Proxy TCP over websocket for admins",
          "operationId": "Proxy_ProxyForNoInstance",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Test container ID",
              "schema": {
                "type": "string",
                "format": "guid"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "204": {
              "description": ""
            },
            "404": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "400": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "418": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}": {
        "get": {
          "tags": [
            "Team"
          ],
          "summary": "Get team information",
          "description": "Get basic information of a team by ID",
          "operationId": "Team_GetBasicInfo",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Team"
          ],
          "summary": "Update team information",
          "description": "Team information update API, must be team creator",
          "operationId": "Team_UpdateTeam",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUpdateModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Team"
          ],
          "summary": "Delete team",
          "description": "User API for deleting team, requires User permission and team captain status",
          "operationId": "Team_DeleteTeam",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team": {
        "get": {
          "tags": [
            "Team"
          ],
          "summary": "Get current team information",
          "description": "Get basic information of a team based on user",
          "operationId": "Team_GetTeamsInfo",
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TeamInfoModel"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Team"
          ],
          "summary": "Create team",
          "description": "User API for creating teams, each user can only create one team",
          "operationId": "Team_CreateTeam",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamUpdateModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}/transfer": {
        "put": {
          "tags": [
            "Team"
          ],
          "summary": "Transfer team ownership",
          "description": "Team ownership transfer API, must be team creator",
          "operationId": "Team_Transfer",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamTransferModel"
                }
              }
            },
            "required": true,
            "x-position": 2
          },
          "responses": {
            "200": {
              "description": "Successfully retrieved team information",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}/invite": {
        "get": {
          "tags": [
            "Team"
          ],
          "summary": "Get invitation information",
          "description": "Get team invitation information, must be team creator",
          "operationId": "Team_InviteCode",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved team token",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Team"
          ],
          "summary": "Update invitation token",
          "description": "Interface to update invitation token, must be team creator",
          "operationId": "Team_UpdateInviteToken",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved team token",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}/kick/{userId}": {
        "post": {
          "tags": [
            "Team"
          ],
          "summary": "Kick user",
          "description": "User kick API, kick user with corresponding ID, requires team creator permission",
          "operationId": "Team_KickUser",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            },
            {
              "name": "userId",
              "in": "path",
              "required": true,
              "description": "ID of user to be kicked",
              "schema": {
                "type": "string",
                "format": "guid"
              },
              "x-position": 2
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved team token",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TeamInfoModel"
                  }
                }
              }
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/accept": {
        "post": {
          "tags": [
            "Team"
          ],
          "summary": "Accept invitation",
          "description": "Interface to accept invitation, requires User permission and not being in team",
          "operationId": "Team_Accept",
          "requestBody": {
            "x-name": "code",
            "description": "Team invitation token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Accepted team invitation"
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}/leave": {
        "post": {
          "tags": [
            "Team"
          ],
          "summary": "Leave team",
          "description": "Interface to leave team, requires User permission and being in team",
          "operationId": "Team_Leave",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "description": "Team ID",
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully left team"
            },
            "400": {
              "description": "Team does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Access forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/{id}/avatar": {
        "put": {
          "tags": [
            "Team"
          ],
          "summary": "Update team avatar",
          "description": "Use this API to update team avatar, requires User permission and team membership",
          "operationId": "Team_Avatar",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              },
              "x-position": 1
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User avatar URL",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "403": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/team/verify": {
        "post": {
          "tags": [
            "Team"
          ],
          "summary": "Verify signature",
          "description": "Perform signature verification",
          "operationId": "Team_VerifySignature",
          "requestBody": {
            "x-name": "model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignatureVerifyModel"
                }
              }
            },
            "required": true,
            "x-position": 1
          },
          "responses": {
            "200": {
              "description": "Signature valid"
            },
            "400": {
              "description": "Input format error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Signature invalid",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RequestResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "RequestResponseOfRegisterStatus": {
          "type": "object",
          "description": "Request response",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Response message"
            },
            "data": {
              "description": "Data",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RegisterStatus"
                }
              ]
            },
            "status": {
              "type": "integer",
              "description": "Status code",
              "format": "int32"
            }
          }
        },
        "RegisterStatus": {
          "type": "string",
          "description": "Login response status",
          "x-enumNames": [
            "LoggedIn",
            "AdminConfirmationRequired",
            "EmailConfirmationRequired"
          ],
          "enum": [
            "LoggedIn",
            "AdminConfirmationRequired",
            "EmailConfirmationRequired"
          ]
        },
        "RequestResponse": {
          "type": "object",
          "description": "Request response",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Response message"
            },
            "status": {
              "type": "integer",
              "description": "Status code",
              "format": "int32"
            }
          }
        },
        "RegisterModel": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ModelWithCaptcha"
            },
            {
              "type": "object",
              "description": "Account registration",
              "additionalProperties": false,
              "required": [
                "userName",
                "password",
                "email"
              ],
              "properties": {
                "userName": {
                  "type": "string",
                  "description": "Username",
                  "maxLength": 15,
                  "minLength": 3
                },
                "password": {
                  "type": "string",
                  "description": "Password",
                  "minLength": 1
                },
                "email": {
                  "type": "string",
                  "description": "Email",
                  "format": "email",
                  "minLength": 1
                }
              }
            }
          ]
        },
        "ModelWithCaptcha": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "challenge": {
              "type": "string",
              "description": "Captcha Challenge",
              "nullable": true
            }
          }
        },
        "RecoveryModel": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ModelWithCaptcha"
            },
            {
              "type": "object",
              "description": "Account recovery",
              "additionalProperties": false,
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "description": "User email",
                  "format": "email",
                  "minLength": 1
                }
              }
            }
          ]
        },
        "PasswordResetModel": {
          "type": "object",
          "description": "Account password reset",
          "additionalProperties": false,
          "required": [
            "password",
            "email",
            "rToken"
          ],
          "properties": {
            "password": {
              "type": "string",
              "description": "Password",
              "minLength": 1
            },
            "email": {
              "type": "string",
              "description": "Email",
              "minLength": 1
            },
            "rToken": {
              "type": "string",
              "description": "Base64 formatted token received via email",
              "minLength": 1
            }
          }
        },
        "AccountVerifyModel": {
          "type": "object",
          "description": "Account verification",
          "additionalProperties": false,
          "required": [
            "token",
            "email"
          ],
          "properties": {
            "token": {
              "type": "string",
              "description": "Base64 formatted token received via email",
              "minLength": 1
            },
            "email": {
              "type": "string",
              "description": "Base64 formatted user email",
              "minLength": 1
            }
          }
        },
        "LoginModel": {
          "allOf": [
            {
              "$ref": "#/components/schemas/ModelWithCaptcha"
            },
            {
              "type": "object",
              "description": "Login",
              "additionalProperties": false,
              "required": [
                "userName",
                "password"
              ],
              "properties": {
                "userName": {
                  "type": "string",
                  "description": "Username or email",
                  "minLength": 1
                },
                "password": {
                  "type": "string",
                  "description": "Password",
                  "minLength": 1
                }
              }
            }
          ]
        },
        "ProfileUpdateModel": {
          "type": "object",
          "description": "Basic account information update",
          "additionalProperties": false,
          "properties": {
            "userName": {
              "type": "string",
              "description": "Username",
              "maxLength": 15,
              "minLength": 3,
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Description",
              "maxLength": 128,
              "nullable": true
            },
            "phone": {
              "type": "string",
              "description": "Phone number",
              "format": "phone",
              "nullable": true
            },
            "realName": {
              "type": "string",
              "description": "Real name",
              "maxLength": 128,
              "nullable": true
            },
            "stdNumber": {
              "type": "string",
              "description": "Student ID",
              "maxLength": 64,
              "nullable": true
            }
          }
        },
        "PasswordChangeModel": {
          "type": "object",
          "description": "Password change",
          "additionalProperties": false,
          "required": [
            "old",
            "new"
          ],
          "properties": {
            "old": {
              "type": "string",
              "description": "Old password",
              "minLength": 6
            },
            "new": {
              "type": "string",
              "description": "New password",
              "minLength": 6
            }
          }
        },
        "RequestResponseOfBoolean": {
          "type": "object",
          "description": "Request response",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Response message"
            },
            "data": {
              "type": "boolean",
              "description": "Data"
            },
            "status": {
              "type": "integer",
              "description": "Status code",
              "format": "int32"
            }
          }
        },
        "MailChangeModel": {
          "type": "object",
          "description": "Email change",
          "additionalProperties": false,
          "required": [
            "newMail"
          ],
          "properties": {
            "newMail": {
              "type": "string",
              "description": "New email",
              "format": "email",
              "minLength": 1
            }
          }
        },
        "ProfileUserInfoModel": {
          "type": "object",
          "description": "Basic account information",
          "additionalProperties": false,
          "properties": {
            "userId": {
              "type": "string",
              "description": "User ID",
              "format": "guid",
              "nullable": true
            },
            "userName": {
              "type": "string",
              "description": "Username",
              "nullable": true
            },
            "email": {
              "type": "string",
              "description": "Email",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Bio",
              "nullable": true
            },
            "phone": {
              "type": "string",
              "description": "Phone number",
              "nullable": true
            },
            "realName": {
              "type": "string",
              "description": "Real name",
              "nullable": true
            },
            "stdNumber": {
              "type": "string",
              "description": "Student ID",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "role": {
              "description": "User role",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Role"
                }
              ]
            }
          }
        },
        "Role": {
          "type": "string",
          "description": "User role enumeration",
          "x-enumNames": [
            "Banned",
            "User",
            "Monitor",
            "Admin"
          ],
          "enum": [
            "Banned",
            "User",
            "Monitor",
            "Admin"
          ]
        },
        "ConfigEditModel": {
          "type": "object",
          "description": "Global configuration update",
          "additionalProperties": false,
          "properties": {
            "accountPolicy": {
              "description": "User policy",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AccountPolicy"
                }
              ]
            },
            "globalConfig": {
              "description": "Global configuration",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/GlobalConfig"
                }
              ]
            },
            "containerPolicy": {
              "description": "Game policy",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ContainerPolicy"
                }
              ]
            }
          }
        },
        "AccountPolicy": {
          "type": "object",
          "description": "Account policy",
          "additionalProperties": false,
          "properties": {
            "allowRegister": {
              "type": "boolean",
              "description": "Allow user registration"
            },
            "activeOnRegister": {
              "type": "boolean",
              "description": "Activate account upon registration"
            },
            "useCaptcha": {
              "type": "boolean",
              "description": "Use captcha verification"
            },
            "emailConfirmationRequired": {
              "type": "boolean",
              "description": "Email confirmation required for registration, email change, and password recovery"
            },
            "emailDomainList": {
              "type": "string",
              "description": "Email domain list, separated by commas"
            }
          }
        },
        "GlobalConfig": {
          "type": "object",
          "description": "Global settings",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Platform prefix name"
            },
            "slogan": {
              "type": "string",
              "description": "Platform slogan"
            },
            "description": {
              "type": "string",
              "description": "Site description information",
              "nullable": true
            },
            "footerInfo": {
              "type": "string",
              "description": "Footer information",
              "nullable": true
            },
            "customTheme": {
              "type": "string",
              "description": "Custom theme color",
              "nullable": true
            },
            "logoHash": {
              "type": "string",
              "description": "Platform logo hash",
              "nullable": true
            },
            "faviconHash": {
              "type": "string",
              "description": "Platform favicon hash",
              "nullable": true
            }
          }
        },
        "ContainerPolicy": {
          "type": "object",
          "description": "Container policy",
          "additionalProperties": false,
          "properties": {
            "autoDestroyOnLimitReached": {
              "type": "boolean",
              "description": "Automatically destroy the oldest container when the limit is reached"
            },
            "maxExerciseContainerCountPerUser": {
              "type": "integer",
              "description": "User container limit, used to limit the number of exercise containers",
              "format": "int32"
            },
            "defaultLifetime": {
              "type": "integer",
              "description": "Default container lifetime in minutes",
              "format": "int32",
              "maximum": 7200.0,
              "minimum": 1.0
            },
            "extensionDuration": {
              "type": "integer",
              "description": "Extension duration for each renewal in minutes",
              "format": "int32",
              "maximum": 7200.0,
              "minimum": 1.0
            },
            "renewalWindow": {
              "type": "integer",
              "description": "Renewal window before container stops in minutes",
              "format": "int32",
              "maximum": 360.0,
              "minimum": 1.0
            }
          }
        },
        "ArrayResponseOfUserInfoModel": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/UserInfoModel"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "UserInfoModel": {
          "type": "object",
          "description": "User information (Admin)",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "User ID",
              "format": "guid",
              "nullable": true
            },
            "userName": {
              "type": "string",
              "description": "Username",
              "nullable": true
            },
            "realName": {
              "type": "string",
              "description": "Real name",
              "nullable": true
            },
            "stdNumber": {
              "type": "string",
              "description": "Student number",
              "nullable": true
            },
            "phone": {
              "type": "string",
              "description": "Contact phone number",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Bio",
              "nullable": true
            },
            "registerTimeUtc": {
              "type": "integer",
              "description": "Registration time",
              "format": "uint64"
            },
            "lastVisitedUtc": {
              "type": "integer",
              "description": "Last visit time",
              "format": "uint64"
            },
            "ip": {
              "type": "string",
              "description": "Last visit IP"
            },
            "email": {
              "type": "string",
              "description": "Email",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "role": {
              "description": "User role",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Role"
                }
              ]
            },
            "emailConfirmed": {
              "type": "boolean",
              "description": "Is email confirmed (can log in)",
              "nullable": true
            }
          }
        },
        "UserCreateModel": {
          "type": "object",
          "description": "Batch user creation (Admin)",
          "additionalProperties": false,
          "required": [
            "userName",
            "password",
            "email"
          ],
          "properties": {
            "userName": {
              "type": "string",
              "description": "Username",
              "maxLength": 15,
              "minLength": 3
            },
            "password": {
              "type": "string",
              "description": "Password",
              "minLength": 1
            },
            "email": {
              "type": "string",
              "description": "Email",
              "format": "email",
              "minLength": 1
            },
            "realName": {
              "type": "string",
              "description": "Real name",
              "maxLength": 128,
              "nullable": true
            },
            "stdNumber": {
              "type": "string",
              "description": "Student number",
              "maxLength": 64,
              "nullable": true
            },
            "phone": {
              "type": "string",
              "description": "Contact phone number",
              "format": "phone",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "Team the user joins",
              "maxLength": 15,
              "nullable": true
            }
          }
        },
        "ArrayResponseOfTeamInfoModel": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/TeamInfoModel"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "TeamInfoModel": {
          "type": "object",
          "description": "Team information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Team bio",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "locked": {
              "type": "boolean",
              "description": "Is locked"
            },
            "members": {
              "type": "array",
              "description": "Team members",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/TeamUserInfoModel"
              }
            }
          }
        },
        "TeamUserInfoModel": {
          "type": "object",
          "description": "Team member information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "User ID",
              "format": "guid",
              "nullable": true
            },
            "userName": {
              "type": "string",
              "description": "Username",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Bio",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "captain": {
              "type": "boolean",
              "description": "Is Captain"
            }
          }
        },
        "AdminTeamModel": {
          "type": "object",
          "description": "Team information modification (Admin)",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Team name",
              "maxLength": 20,
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Team bio",
              "maxLength": 72,
              "nullable": true
            },
            "locked": {
              "type": "boolean",
              "description": "Is locked",
              "nullable": true
            }
          }
        },
        "AdminUserInfoModel": {
          "type": "object",
          "description": "User information modification (Admin)",
          "additionalProperties": false,
          "properties": {
            "userName": {
              "type": "string",
              "description": "Username",
              "maxLength": 15,
              "minLength": 3,
              "nullable": true
            },
            "email": {
              "type": "string",
              "description": "Email",
              "format": "email",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Signature",
              "maxLength": 128,
              "nullable": true
            },
            "phone": {
              "type": "string",
              "description": "Phone number",
              "format": "phone",
              "nullable": true
            },
            "realName": {
              "type": "string",
              "description": "Real name",
              "maxLength": 128,
              "nullable": true
            },
            "stdNumber": {
              "type": "string",
              "description": "Student number",
              "maxLength": 64,
              "nullable": true
            },
            "emailConfirmed": {
              "type": "boolean",
              "description": "Is email confirmed (can log in)",
              "nullable": true
            },
            "role": {
              "description": "User role",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Role"
                }
              ]
            }
          }
        },
        "LogMessageModel": {
          "type": "object",
          "description": "Log information (Admin)",
          "additionalProperties": false,
          "properties": {
            "time": {
              "type": "integer",
              "description": "Log time",
              "format": "uint64"
            },
            "name": {
              "type": "string",
              "description": "Username",
              "nullable": true
            },
            "level": {
              "type": "string",
              "nullable": true
            },
            "ip": {
              "type": "string",
              "description": "IP address",
              "nullable": true
            },
            "msg": {
              "type": "string",
              "description": "Log message",
              "nullable": true
            },
            "status": {
              "type": "string",
              "description": "Task status",
              "nullable": true
            }
          }
        },
        "ParticipationEditModel": {
          "type": "object",
          "description": "Modify the participation information",
          "additionalProperties": false,
          "properties": {
            "status": {
              "description": "Participation Status",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationStatus"
                }
              ]
            },
            "division": {
              "type": "string",
              "description": "The division of the participated team",
              "nullable": true
            }
          }
        },
        "ParticipationStatus": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "Pending",
            "Accepted",
            "Rejected",
            "Suspended",
            "Unsubmitted"
          ],
          "enum": [
            "Pending",
            "Accepted",
            "Rejected",
            "Suspended",
            "Unsubmitted"
          ]
        },
        "WriteupInfoModel": {
          "type": "object",
          "description": "Game writeup information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Participation ID",
              "format": "int32"
            },
            "team": {
              "description": "Team information",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TeamInfoModel"
                }
              ]
            },
            "url": {
              "type": "string",
              "description": "File URL"
            },
            "uploadTimeUtc": {
              "type": "integer",
              "description": "File upload time",
              "format": "uint64"
            }
          }
        },
        "ArrayResponseOfContainerInstanceModel": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/ContainerInstanceModel"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "ContainerInstanceModel": {
          "type": "object",
          "description": "Container instance information (Admin)",
          "additionalProperties": false,
          "properties": {
            "team": {
              "description": "Team",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TeamModel"
                }
              ]
            },
            "challenge": {
              "description": "Challenge",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeModel"
                }
              ]
            },
            "image": {
              "type": "string",
              "description": "Container image"
            },
            "containerGuid": {
              "type": "string",
              "description": "Container database ID",
              "format": "guid"
            },
            "containerId": {
              "type": "string",
              "description": "Container ID"
            },
            "startedAt": {
              "type": "integer",
              "description": "Container creation time",
              "format": "uint64"
            },
            "expectStopAt": {
              "type": "integer",
              "description": "Expected container stop time",
              "format": "uint64"
            },
            "ip": {
              "type": "string",
              "description": "Access IP"
            },
            "port": {
              "type": "integer",
              "description": "Access port",
              "format": "int32"
            }
          }
        },
        "TeamModel": {
          "type": "object",
          "description": "Team information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "avatar": {
              "type": "string",
              "description": "Team avatar",
              "nullable": true
            }
          }
        },
        "ChallengeModel": {
          "type": "object",
          "description": "Challenge information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge ID",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title"
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            }
          }
        },
        "ChallengeCategory": {
          "type": "string",
          "description": "Challenge category",
          "x-enumNames": [
            "Misc",
            "Crypto",
            "Pwn",
            "Web",
            "Reverse",
            "Blockchain",
            "Forensics",
            "Hardware",
            "Mobile",
            "PPC",
            "AI",
            "Pentest",
            "OSINT"
          ],
          "enum": [
            "Misc",
            "Crypto",
            "Pwn",
            "Web",
            "Reverse",
            "Blockchain",
            "Forensics",
            "Hardware",
            "Mobile",
            "PPC",
            "AI",
            "Pentest",
            "OSINT"
          ]
        },
        "ArrayResponseOfLocalFile": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/LocalFile"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "LocalFile": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "name"
          ],
          "properties": {
            "hash": {
              "type": "string",
              "description": "File hash",
              "maxLength": 64
            },
            "name": {
              "type": "string",
              "description": "File name",
              "minLength": 1
            }
          }
        },
        "ProblemDetails": {
          "type": "object",
          "additionalProperties": {
            "nullable": true
          },
          "properties": {
            "type": {
              "type": "string",
              "nullable": true
            },
            "title": {
              "type": "string",
              "nullable": true
            },
            "status": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "detail": {
              "type": "string",
              "nullable": true
            },
            "instance": {
              "type": "string",
              "nullable": true
            }
          }
        },
        "PostEditModel": {
          "type": "object",
          "description": "Post item (Edit)",
          "additionalProperties": false,
          "required": [
            "title"
          ],
          "properties": {
            "title": {
              "type": "string",
              "description": "Post title",
              "maxLength": 50,
              "minLength": 1
            },
            "summary": {
              "type": "string",
              "description": "Post summary"
            },
            "content": {
              "type": "string",
              "description": "Post content"
            },
            "tags": {
              "type": "array",
              "description": "Post tags",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "isPinned": {
              "type": "boolean",
              "description": "Is pinned"
            }
          }
        },
        "PostDetailModel": {
          "type": "object",
          "description": "Post details",
          "additionalProperties": false,
          "required": [
            "id",
            "title",
            "summary",
            "content",
            "isPinned",
            "time"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Post ID",
              "minLength": 1
            },
            "title": {
              "type": "string",
              "description": "Post title",
              "minLength": 1
            },
            "summary": {
              "type": "string",
              "description": "Post summary",
              "minLength": 1
            },
            "content": {
              "type": "string",
              "description": "Post content",
              "minLength": 1
            },
            "isPinned": {
              "type": "boolean",
              "description": "Is pinned"
            },
            "tags": {
              "type": "array",
              "description": "Post tags",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "authorAvatar": {
              "type": "string",
              "description": "Author avatar",
              "nullable": true
            },
            "authorName": {
              "type": "string",
              "description": "Author name",
              "nullable": true
            },
            "time": {
              "type": "integer",
              "description": "Publish time",
              "format": "uint64",
              "minLength": 1
            }
          }
        },
        "GameInfoModel": {
          "type": "object",
          "description": "Game information (Edit)",
          "additionalProperties": false,
          "required": [
            "title",
            "start",
            "end"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Game Id",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Game title",
              "minLength": 1
            },
            "hidden": {
              "type": "boolean",
              "description": "Is hidden"
            },
            "summary": {
              "type": "string",
              "description": "Game summary"
            },
            "content": {
              "type": "string",
              "description": "Game detailed description"
            },
            "acceptWithoutReview": {
              "type": "boolean",
              "description": "Accept teams without review"
            },
            "writeupRequired": {
              "type": "boolean",
              "description": "Is writeup required"
            },
            "inviteCode": {
              "type": "string",
              "description": "Game invitation code",
              "maxLength": 32,
              "nullable": true
            },
            "divisions": {
              "type": "array",
              "description": "List of divisions the game belongs to",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "teamMemberCountLimit": {
              "type": "integer",
              "description": "Team member count limit, 0 means no limit",
              "format": "int32"
            },
            "containerCountLimit": {
              "type": "integer",
              "description": "Container count limit per team",
              "format": "int32"
            },
            "poster": {
              "type": "string",
              "description": "Game poster URL",
              "nullable": true
            },
            "publicKey": {
              "type": "string",
              "description": "Game public key"
            },
            "practiceMode": {
              "type": "boolean",
              "description": "Is the game in practice mode (accessible even after the game ends)"
            },
            "start": {
              "type": "integer",
              "description": "Start time",
              "format": "uint64",
              "minLength": 1
            },
            "end": {
              "type": "integer",
              "description": "End time",
              "format": "uint64",
              "minLength": 1
            },
            "writeupDeadline": {
              "type": "integer",
              "description": "Writeup submission deadline",
              "format": "uint64"
            },
            "writeupNote": {
              "type": "string",
              "description": "Writeup additional notes"
            },
            "bloodBonus": {
              "type": "integer",
              "description": "Blood bonus points",
              "format": "int64"
            }
          }
        },
        "ArrayResponseOfGameInfoModel": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/GameInfoModel"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "GameNotice": {
          "allOf": [
            {
              "$ref": "#/components/schemas/FormattableDataOfNoticeType"
            },
            {
              "type": "object",
              "description": "Game notice, which will be sent to the client.\nInformation includes first, second, and third blood notifications, hint release notifications, challenging opening notifications, etc.",
              "additionalProperties": false,
              "required": [
                "id",
                "time"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "time": {
                  "type": "integer",
                  "description": "Publish time",
                  "format": "uint64",
                  "minLength": 1
                }
              }
            }
          ]
        },
        "FormattableDataOfNoticeType": {
          "type": "object",
          "description": "Formattable data",
          "x-abstract": true,
          "additionalProperties": false,
          "required": [
            "type",
            "values"
          ],
          "properties": {
            "type": {
              "description": "Data type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/NoticeType"
                }
              ]
            },
            "values": {
              "type": "array",
              "description": "List of formatted values",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "NoticeType": {
          "type": "string",
          "description": "Game announcement type",
          "x-enumNames": [
            "Normal",
            "FirstBlood",
            "SecondBlood",
            "ThirdBlood",
            "NewHint",
            "NewChallenge"
          ],
          "enum": [
            "Normal",
            "FirstBlood",
            "SecondBlood",
            "ThirdBlood",
            "NewHint",
            "NewChallenge"
          ]
        },
        "GameNoticeModel": {
          "type": "object",
          "description": "Game notice (Edit)",
          "additionalProperties": false,
          "required": [
            "content"
          ],
          "properties": {
            "content": {
              "type": "string",
              "description": "Notice content",
              "minLength": 1
            }
          }
        },
        "ChallengeEditDetailModel": {
          "type": "object",
          "description": "Challenge detailed information (Edit)",
          "additionalProperties": false,
          "required": [
            "title",
            "category",
            "type",
            "isEnabled",
            "acceptedCount",
            "flags",
            "containerImage",
            "memoryLimit",
            "cpuCount",
            "storageLimit",
            "containerExposePort",
            "originalScore",
            "minScoreRate",
            "difficulty"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge Id",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title",
              "minLength": 1
            },
            "content": {
              "type": "string",
              "description": "Challenge content"
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "type": {
              "description": "Challenge type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeType"
                }
              ]
            },
            "hints": {
              "type": "array",
              "description": "Challenge hints",
              "items": {
                "type": "string"
              }
            },
            "flagTemplate": {
              "type": "string",
              "description": "Flag template, used to generate Flag based on Token and challenge, game information",
              "maxLength": 120,
              "nullable": true
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Is the challenge enabled"
            },
            "acceptedCount": {
              "type": "integer",
              "description": "Number of people who passed",
              "format": "int32"
            },
            "fileName": {
              "type": "string",
              "description": "Unified file name (only for dynamic attachments)",
              "nullable": true
            },
            "attachment": {
              "description": "Challenge attachment (dynamic attachments are stored in FlagInfoModel)",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Attachment"
                }
              ]
            },
            "testContainer": {
              "description": "Test container",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ContainerInfoModel"
                }
              ]
            },
            "flags": {
              "type": "array",
              "description": "Challenge Flag information",
              "items": {
                "$ref": "#/components/schemas/FlagInfoModel"
              }
            },
            "containerImage": {
              "type": "string",
              "description": "Image name and tag",
              "minLength": 1
            },
            "memoryLimit": {
              "type": "integer",
              "description": "Memory limit (MB)",
              "format": "int32"
            },
            "cpuCount": {
              "type": "integer",
              "description": "CPU limit (0.1 CPUs)",
              "format": "int32"
            },
            "storageLimit": {
              "type": "integer",
              "description": "Storage limit (MB)",
              "format": "int32"
            },
            "containerExposePort": {
              "type": "integer",
              "description": "Container exposed port",
              "format": "int32"
            },
            "enableTrafficCapture": {
              "type": "boolean",
              "description": "Whether to record traffic",
              "nullable": true
            },
            "disableBloodBonus": {
              "type": "boolean",
              "description": "Whether to disable blood bonus",
              "nullable": true
            },
            "originalScore": {
              "type": "integer",
              "description": "Initial score",
              "format": "int32"
            },
            "minScoreRate": {
              "type": "number",
              "description": "Minimum score rate",
              "format": "double",
              "maximum": 1.0,
              "minimum": 0.0
            },
            "difficulty": {
              "type": "number",
              "description": "Difficulty coefficient",
              "format": "double"
            }
          }
        },
        "ChallengeType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "StaticAttachment",
            "StaticContainer",
            "DynamicAttachment",
            "DynamicContainer"
          ],
          "enum": [
            "StaticAttachment",
            "StaticContainer",
            "DynamicAttachment",
            "DynamicContainer"
          ]
        },
        "Attachment": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "id",
            "type"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "type": {
              "description": "Attachment type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                }
              ]
            },
            "url": {
              "type": "string",
              "description": "Default file URL",
              "nullable": true
            },
            "fileSize": {
              "type": "integer",
              "description": "Get attachment size",
              "format": "int64",
              "nullable": true
            }
          }
        },
        "FileType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "None",
            "Local",
            "Remote"
          ],
          "enum": [
            "None",
            "Local",
            "Remote"
          ]
        },
        "ContainerInfoModel": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "status": {
              "description": "Container status",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ContainerStatus"
                }
              ]
            },
            "startedAt": {
              "type": "integer",
              "description": "Container creation time",
              "format": "uint64"
            },
            "expectStopAt": {
              "type": "integer",
              "description": "Expected container stop time",
              "format": "uint64"
            },
            "entry": {
              "type": "string",
              "description": "Challenge entry point"
            }
          }
        },
        "ContainerStatus": {
          "type": "string",
          "description": "Container status",
          "x-enumNames": [
            "Pending",
            "Running",
            "Destroyed"
          ],
          "enum": [
            "Pending",
            "Running",
            "Destroyed"
          ]
        },
        "FlagInfoModel": {
          "type": "object",
          "description": "Flag information (Edit)",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Flag Id",
              "format": "int32"
            },
            "flag": {
              "type": "string",
              "description": "Flag text"
            },
            "attachment": {
              "description": "Attachment corresponding to the Flag",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Attachment"
                }
              ]
            }
          }
        },
        "ChallengeInfoModel": {
          "type": "object",
          "description": "Basic challenge information (Edit)",
          "additionalProperties": false,
          "required": [
            "title"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge Id",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title",
              "minLength": 1
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "type": {
              "description": "Challenge type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeType"
                }
              ]
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Is the challenge enabled"
            },
            "score": {
              "type": "integer",
              "description": "Challenge score",
              "format": "int32"
            },
            "minScore": {
              "type": "integer",
              "description": "Minimum score",
              "format": "int32"
            },
            "originalScore": {
              "type": "integer",
              "description": "Original score",
              "format": "int32"
            }
          }
        },
        "ChallengeUpdateModel": {
          "type": "object",
          "description": "Challenge update information (Edit)",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Challenge title",
              "minLength": 1,
              "nullable": true
            },
            "content": {
              "type": "string",
              "description": "Challenge content",
              "nullable": true
            },
            "flagTemplate": {
              "type": "string",
              "description": "Flag template, used to generate Flag based on Token and challenge/game information",
              "maxLength": 120,
              "nullable": true
            },
            "category": {
              "description": "Challenge category",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "hints": {
              "type": "array",
              "description": "Challenge hints",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Is the challenge enabled",
              "nullable": true
            },
            "fileName": {
              "type": "string",
              "description": "Unified file name",
              "nullable": true
            },
            "containerImage": {
              "type": "string",
              "description": "Container image name and tag",
              "nullable": true
            },
            "memoryLimit": {
              "type": "integer",
              "description": "Memory limit (MB)",
              "format": "int32",
              "maximum": 1048576.0,
              "minimum": 32.0,
              "nullable": true
            },
            "cpuCount": {
              "type": "integer",
              "description": "CPU limit (0.1 CPUs)",
              "format": "int32",
              "maximum": 1024.0,
              "minimum": 1.0,
              "nullable": true
            },
            "storageLimit": {
              "type": "integer",
              "description": "Storage limit (MB)",
              "format": "int32",
              "maximum": 1048576.0,
              "minimum": 128.0,
              "nullable": true
            },
            "containerExposePort": {
              "type": "integer",
              "description": "Container exposed port",
              "format": "int32",
              "nullable": true
            },
            "enableTrafficCapture": {
              "type": "boolean",
              "description": "Is traffic capture enabled",
              "nullable": true
            },
            "disableBloodBonus": {
              "type": "boolean",
              "description": "Is blood bonus disabled",
              "nullable": true
            },
            "originalScore": {
              "type": "integer",
              "description": "Initial score",
              "format": "int32",
              "nullable": true
            },
            "minScoreRate": {
              "type": "number",
              "description": "Minimum score rate",
              "format": "double",
              "maximum": 1.0,
              "minimum": 0.0,
              "nullable": true
            },
            "difficulty": {
              "type": "number",
              "description": "Difficulty coefficient",
              "format": "double",
              "nullable": true
            }
          }
        },
        "AttachmentCreateModel": {
          "type": "object",
          "description": "New attachment information (Edit)",
          "additionalProperties": false,
          "properties": {
            "attachmentType": {
              "description": "Attachment type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                }
              ]
            },
            "fileHash": {
              "type": "string",
              "description": "File hash (local file)",
              "nullable": true
            },
            "remoteUrl": {
              "type": "string",
              "description": "File URL (remote file)",
              "nullable": true
            }
          }
        },
        "FlagCreateModel": {
          "type": "object",
          "description": "New Flag information (Edit)",
          "additionalProperties": false,
          "required": [
            "flag"
          ],
          "properties": {
            "flag": {
              "type": "string",
              "description": "Flag text",
              "maxLength": 127,
              "minLength": 1
            },
            "attachmentType": {
              "description": "Attachment type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                }
              ]
            },
            "fileHash": {
              "type": "string",
              "description": "File hash (local file)",
              "nullable": true
            },
            "remoteUrl": {
              "type": "string",
              "description": "File URL (remote file)",
              "nullable": true
            }
          }
        },
        "TaskStatus": {
          "type": "string",
          "description": "Task execution status",
          "x-enumNames": [
            "Success",
            "Failed",
            "Duplicate",
            "Denied",
            "NotFound",
            "Exit",
            "Pending"
          ],
          "enum": [
            "Success",
            "Failed",
            "Duplicate",
            "Denied",
            "NotFound",
            "Exit",
            "Pending"
          ]
        },
        "BasicGameInfoModel": {
          "type": "object",
          "description": "Basic game information, excluding detailed description and current team registration status",
          "additionalProperties": false,
          "required": [
            "id",
            "start",
            "end"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Game title"
            },
            "summary": {
              "type": "string",
              "description": "Game summary"
            },
            "poster": {
              "type": "string",
              "description": "Poster image URL",
              "nullable": true
            },
            "limit": {
              "type": "integer",
              "description": "Team member limit",
              "format": "int32"
            },
            "start": {
              "type": "integer",
              "description": "Start time",
              "format": "uint64",
              "minLength": 1
            },
            "end": {
              "type": "integer",
              "description": "End time",
              "format": "uint64",
              "minLength": 1
            }
          }
        },
        "ArrayResponseOfBasicGameInfoModel": {
          "type": "object",
          "description": "List response",
          "additionalProperties": false,
          "required": [
            "data",
            "length"
          ],
          "properties": {
            "data": {
              "type": "array",
              "description": "Data",
              "items": {
                "$ref": "#/components/schemas/BasicGameInfoModel"
              }
            },
            "length": {
              "type": "integer",
              "description": "Data length",
              "format": "int32"
            },
            "total": {
              "type": "integer",
              "description": "Total length",
              "format": "int32"
            }
          }
        },
        "DetailedGameInfoModel": {
          "type": "object",
          "description": "Detailed game information, including detailed introduction and current team registration status",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Game title"
            },
            "summary": {
              "type": "string",
              "description": "Game description"
            },
            "content": {
              "type": "string",
              "description": "Detailed introduction of the game"
            },
            "hidden": {
              "type": "boolean",
              "description": "Whether the game is hidden"
            },
            "divisions": {
              "type": "array",
              "description": "List of participation divisions",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "inviteCodeRequired": {
              "type": "boolean",
              "description": "Whether an invitation code is required"
            },
            "writeupRequired": {
              "type": "boolean",
              "description": "Whether writeup submission is required"
            },
            "poster": {
              "type": "string",
              "description": "Game poster URL",
              "nullable": true
            },
            "limit": {
              "type": "integer",
              "description": "Team member count limit",
              "format": "int32"
            },
            "teamCount": {
              "type": "integer",
              "description": "Number of teams registered for participation",
              "format": "int32"
            },
            "division": {
              "type": "string",
              "description": "Current registered division",
              "nullable": true
            },
            "teamName": {
              "type": "string",
              "description": "Team name for participation",
              "nullable": true
            },
            "practiceMode": {
              "type": "boolean",
              "description": "Whether the game is in practice mode (can still be accessed after the game ends)"
            },
            "status": {
              "description": "Team participation status",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationStatus"
                }
              ]
            },
            "start": {
              "type": "integer",
              "description": "Start time",
              "format": "uint64"
            },
            "end": {
              "type": "integer",
              "description": "End time",
              "format": "uint64"
            }
          }
        },
        "GameJoinModel": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "teamId": {
              "type": "integer",
              "description": "Team ID for participation",
              "format": "int32"
            },
            "division": {
              "type": "string",
              "description": "Division for participation",
              "nullable": true
            },
            "inviteCode": {
              "type": "string",
              "description": "Invitation code for participation",
              "nullable": true
            }
          }
        },
        "ScoreboardModel": {
          "type": "object",
          "description": "Scoreboard",
          "additionalProperties": false,
          "required": [
            "updateTimeUtc",
            "bloodBonus"
          ],
          "properties": {
            "updateTimeUtc": {
              "type": "integer",
              "description": "Update time",
              "format": "uint64",
              "minLength": 1
            },
            "bloodBonus": {
              "type": "integer",
              "description": "Blood bonus coefficient",
              "format": "int64"
            },
            "timeLines": {
              "type": "object",
              "description": "Timeline of the top ten",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TopTimeLine"
                }
              }
            },
            "items": {
              "type": "array",
              "description": "List of team information",
              "items": {
                "$ref": "#/components/schemas/ScoreboardItem"
              }
            },
            "challenges": {
              "type": "object",
              "description": "Challenge information",
              "x-dictionaryKey": {
                "$ref": "#/components/schemas/ChallengeCategory"
              },
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChallengeInfo"
                }
              }
            },
            "challengeCount": {
              "type": "integer",
              "description": "Number of challenges",
              "format": "int32"
            }
          }
        },
        "TopTimeLine": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "items": {
              "type": "array",
              "description": "Timeline",
              "items": {
                "$ref": "#/components/schemas/TimeLine"
              }
            }
          }
        },
        "TimeLine": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "time": {
              "type": "integer",
              "description": "Time",
              "format": "uint64"
            },
            "score": {
              "type": "integer",
              "description": "Score",
              "format": "int32"
            }
          }
        },
        "ScoreboardItem": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "bio": {
              "type": "string",
              "description": "Team Bio",
              "nullable": true
            },
            "division": {
              "type": "string",
              "description": "Division of participation",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Team avatar",
              "nullable": true
            },
            "score": {
              "type": "integer",
              "description": "Score",
              "format": "int32"
            },
            "rank": {
              "type": "integer",
              "description": "Rank",
              "format": "int32"
            },
            "divisionRank": {
              "type": "integer",
              "description": "Division rank",
              "format": "int32",
              "nullable": true
            },
            "lastSubmissionTime": {
              "type": "integer",
              "description": "Last submission time",
              "format": "uint64"
            },
            "solvedChallenges": {
              "type": "array",
              "description": "List of solved challenges",
              "items": {
                "$ref": "#/components/schemas/ChallengeItem"
              }
            },
            "solvedCount": {
              "type": "integer",
              "description": "Number of solved challenges",
              "format": "int32"
            }
          }
        },
        "ChallengeItem": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge ID",
              "format": "int32"
            },
            "score": {
              "type": "integer",
              "description": "Challenge score",
              "format": "int32"
            },
            "type": {
              "description": "Submission type (unsolved, first blood, second blood, third blood, or others)",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SubmissionType"
                }
              ]
            },
            "userName": {
              "type": "string",
              "description": "Username of the solver",
              "nullable": true
            },
            "time": {
              "type": "integer",
              "description": "Submission time for the challenge, used to calculate the timeline",
              "format": "uint64"
            }
          }
        },
        "SubmissionType": {
          "type": "string",
          "description": "Submission type",
          "x-enumNames": [
            "Unaccepted",
            "FirstBlood",
            "SecondBlood",
            "ThirdBlood",
            "Normal"
          ],
          "enum": [
            "Unaccepted",
            "FirstBlood",
            "SecondBlood",
            "ThirdBlood",
            "Normal"
          ]
        },
        "ChallengeInfo": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge ID",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title"
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "score": {
              "type": "integer",
              "description": "Challenge score",
              "format": "int32"
            },
            "solved": {
              "type": "integer",
              "description": "Number of teams that solved the challenge",
              "format": "int32"
            },
            "bloods": {
              "type": "array",
              "description": "Bloods for the challenge",
              "items": {
                "$ref": "#/components/schemas/Blood"
              }
            },
            "disableBloodBonus": {
              "type": "boolean",
              "description": "Whether to disable blood bonus"
            }
          }
        },
        "Blood": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name"
            },
            "avatar": {
              "type": "string",
              "description": "Team avatar",
              "nullable": true
            },
            "submitTimeUtc": {
              "type": "integer",
              "description": "Time when the blood was obtained",
              "format": "uint64",
              "nullable": true
            }
          }
        },
        "GameEvent": {
          "allOf": [
            {
              "$ref": "#/components/schemas/FormattableDataOfEventType"
            },
            {
              "type": "object",
              "description": "Game event, recorded but not sent to the client.\nInformation includes flag submission, container start/stop, cheating, and score changes.",
              "additionalProperties": false,
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "description": "Publish time",
                  "format": "uint64",
                  "minLength": 1
                },
                "user": {
                  "type": "string",
                  "description": "Related username"
                },
                "team": {
                  "type": "string",
                  "description": "Related team name"
                }
              }
            }
          ]
        },
        "FormattableDataOfEventType": {
          "type": "object",
          "description": "Formattable data",
          "x-abstract": true,
          "additionalProperties": false,
          "required": [
            "type",
            "values"
          ],
          "properties": {
            "type": {
              "description": "Data type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EventType"
                }
              ]
            },
            "values": {
              "type": "array",
              "description": "List of formatted values",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "EventType": {
          "type": "string",
          "description": "Game event type",
          "x-enumNames": [
            "Normal",
            "ContainerStart",
            "ContainerDestroy",
            "FlagSubmit",
            "CheatDetected"
          ],
          "enum": [
            "Normal",
            "ContainerStart",
            "ContainerDestroy",
            "FlagSubmit",
            "CheatDetected"
          ]
        },
        "Submission": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "answer": {
              "type": "string",
              "description": "Submitted answer string",
              "maxLength": 127
            },
            "status": {
              "description": "Status of the submitted answer",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AnswerResult"
                }
              ]
            },
            "time": {
              "type": "integer",
              "description": "Time the answer was submitted",
              "format": "uint64"
            },
            "user": {
              "type": "string",
              "description": "User who submitted"
            },
            "team": {
              "type": "string",
              "description": "Team that submitted"
            },
            "challenge": {
              "type": "string",
              "description": "Challenge that was submitted"
            }
          }
        },
        "AnswerResult": {
          "type": "string",
          "description": "Judgement result",
          "x-enumNames": [
            "FlagSubmitted",
            "Accepted",
            "WrongAnswer",
            "CheatDetected",
            "NotFound"
          ],
          "enum": [
            "FlagSubmitted",
            "Accepted",
            "WrongAnswer",
            "CheatDetected",
            "NotFound"
          ]
        },
        "CheatInfoModel": {
          "type": "object",
          "description": "Cheat behavior information",
          "additionalProperties": false,
          "properties": {
            "ownedTeam": {
              "description": "Team owning the flag",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationModel"
                }
              ]
            },
            "submitTeam": {
              "description": "Team submitting the flag",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationModel"
                }
              ]
            },
            "submission": {
              "description": "Submission corresponding to this cheating behavior",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Submission"
                }
              ]
            }
          }
        },
        "ParticipationModel": {
          "type": "object",
          "description": "Team participation information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Participation ID",
              "format": "int32"
            },
            "team": {
              "description": "Team information",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TeamModel"
                }
              ]
            },
            "status": {
              "description": "Team participation status",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationStatus"
                }
              ]
            },
            "division": {
              "type": "string",
              "description": "Team division",
              "nullable": true
            }
          }
        },
        "ChallengeTrafficModel": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "title"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge ID",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title",
              "minLength": 1
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "type": {
              "description": "Challenge type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeType"
                }
              ]
            },
            "isEnabled": {
              "type": "boolean",
              "description": "Is the challenge enabled"
            },
            "count": {
              "type": "integer",
              "description": "Number of team traffic captured by the challenge",
              "format": "int32"
            }
          }
        },
        "TeamTrafficModel": {
          "type": "object",
          "description": "Team traffic information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Participation ID",
              "format": "int32"
            },
            "teamId": {
              "type": "integer",
              "description": "Team Id",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name",
              "nullable": true
            },
            "division": {
              "type": "string",
              "description": "Division of participation",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "count": {
              "type": "integer",
              "description": "Number of traffic captured by the challenge",
              "format": "int32"
            }
          }
        },
        "FileRecord": {
          "type": "object",
          "description": "File record",
          "additionalProperties": false,
          "properties": {
            "fileName": {
              "type": "string",
              "description": "File name"
            },
            "size": {
              "type": "integer",
              "description": "File size",
              "format": "int64"
            },
            "updateTime": {
              "type": "integer",
              "description": "File modification date",
              "format": "uint64"
            }
          }
        },
        "GameDetailModel": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "teamToken",
            "writeupRequired",
            "writeupDeadline"
          ],
          "properties": {
            "challenges": {
              "type": "object",
              "description": "Challenge information",
              "x-dictionaryKey": {
                "$ref": "#/components/schemas/ChallengeCategory"
              },
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChallengeInfo"
                }
              }
            },
            "challengeCount": {
              "type": "integer",
              "description": "Number of challenges",
              "format": "int32"
            },
            "rank": {
              "description": "Scoreboard information",
              "nullable": true,
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ScoreboardItem"
                }
              ]
            },
            "teamToken": {
              "type": "string",
              "description": "Team token",
              "minLength": 1
            },
            "writeupRequired": {
              "type": "boolean",
              "description": "Whether writeup submission is required"
            },
            "writeupDeadline": {
              "type": "integer",
              "description": "Writeup submission deadline",
              "format": "uint64",
              "minLength": 1
            }
          }
        },
        "ParticipationInfoModel": {
          "type": "object",
          "description": "Participation for review (Admin)",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Participation ID",
              "format": "int32"
            },
            "team": {
              "description": "Participating team",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TeamWithDetailedUserInfo"
                }
              ]
            },
            "registeredMembers": {
              "type": "array",
              "description": "Registered members",
              "items": {
                "type": "string",
                "format": "guid"
              }
            },
            "division": {
              "type": "string",
              "description": "Division of the game",
              "nullable": true
            },
            "status": {
              "description": "Participation status",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ParticipationStatus"
                }
              ]
            }
          }
        },
        "TeamWithDetailedUserInfo": {
          "type": "object",
          "description": "Detailed team information for review (Admin)",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Team ID",
              "format": "int32"
            },
            "name": {
              "type": "string",
              "description": "Team name",
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Team bio",
              "nullable": true
            },
            "avatar": {
              "type": "string",
              "description": "Avatar URL",
              "nullable": true
            },
            "locked": {
              "type": "boolean",
              "description": "Is locked"
            },
            "captainId": {
              "type": "string",
              "description": "Captain Id",
              "format": "guid"
            },
            "members": {
              "type": "array",
              "description": "Team members",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ProfileUserInfoModel"
              }
            }
          }
        },
        "ChallengeDetailModel": {
          "type": "object",
          "description": "Challenge detailed information",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "integer",
              "description": "Challenge ID",
              "format": "int32"
            },
            "title": {
              "type": "string",
              "description": "Challenge title"
            },
            "content": {
              "type": "string",
              "description": "Challenge content"
            },
            "category": {
              "description": "Challenge category",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeCategory"
                }
              ]
            },
            "hints": {
              "type": "array",
              "description": "Challenge hints",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "score": {
              "type": "integer",
              "description": "Current score of the challenge",
              "format": "int32"
            },
            "type": {
              "description": "Challenge type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ChallengeType"
                }
              ]
            },
            "context": {
              "description": "Flag context",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ClientFlagContext"
                }
              ]
            }
          }
        },
        "ClientFlagContext": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "closeTime": {
              "type": "integer",
              "description": "Close time of the challenge instance",
              "format": "uint64",
              "nullable": true
            },
            "instanceEntry": {
              "type": "string",
              "description": "Connection method of the challenge instance",
              "nullable": true
            },
            "url": {
              "type": "string",
              "description": "Attachment URL",
              "nullable": true
            },
            "fileSize": {
              "type": "integer",
              "description": "Attachment file size",
              "format": "int64",
              "nullable": true
            }
          }
        },
        "FlagSubmitModel": {
          "type": "object",
          "description": "Flag submission",
          "additionalProperties": false,
          "required": [
            "flag"
          ],
          "properties": {
            "flag": {
              "type": "string",
              "description": "Flag content\nFix: Prevent accidental submissions from the frontend (number/float/null) that may be incorrectly converted",
              "maxLength": 127,
              "minLength": 1
            }
          }
        },
        "BasicWriteupInfoModel": {
          "type": "object",
          "description": "Game writeup submission information",
          "additionalProperties": false,
          "properties": {
            "submitted": {
              "type": "boolean",
              "description": "Whether it has been submitted"
            },
            "name": {
              "type": "string",
              "description": "File name"
            },
            "fileSize": {
              "type": "integer",
              "description": "File size",
              "format": "int64"
            },
            "note": {
              "type": "string",
              "description": "Writeup additional notes"
            }
          }
        },
        "PostInfoModel": {
          "type": "object",
          "description": "Post information",
          "additionalProperties": false,
          "required": [
            "id",
            "title",
            "summary",
            "isPinned",
            "time"
          ],
          "properties": {
            "id": {
              "type": "string",
              "description": "Post ID",
              "minLength": 1
            },
            "title": {
              "type": "string",
              "description": "Post title",
              "minLength": 1
            },
            "summary": {
              "type": "string",
              "description": "Post summary",
              "minLength": 1
            },
            "isPinned": {
              "type": "boolean",
              "description": "Is pinned"
            },
            "tags": {
              "type": "array",
              "description": "Post tags",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "authorAvatar": {
              "type": "string",
              "description": "Author avatar",
              "nullable": true
            },
            "authorName": {
              "type": "string",
              "description": "Author name",
              "nullable": true
            },
            "time": {
              "type": "integer",
              "description": "Update time",
              "format": "uint64",
              "minLength": 1
            }
          }
        },
        "ClientConfig": {
          "type": "object",
          "description": "Client configuration",
          "additionalProperties": false,
          "properties": {
            "title": {
              "type": "string",
              "description": "Platform prefix name"
            },
            "slogan": {
              "type": "string",
              "description": "Platform slogan"
            },
            "footerInfo": {
              "type": "string",
              "description": "Footer information",
              "nullable": true
            },
            "customTheme": {
              "type": "string",
              "description": "Custom theme color",
              "nullable": true
            },
            "logoUrl": {
              "type": "string",
              "description": "Platform logo URL",
              "nullable": true
            },
            "portMapping": {
              "description": "Container port mapping type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ContainerPortMappingType"
                }
              ]
            },
            "defaultLifetime": {
              "type": "integer",
              "description": "Default container lifetime in minutes",
              "format": "int32"
            },
            "extensionDuration": {
              "type": "integer",
              "description": "Extension duration for each renewal in minutes",
              "format": "int32"
            },
            "renewalWindow": {
              "type": "integer",
              "description": "Renewal window before container stops in minutes",
              "format": "int32"
            }
          }
        },
        "ContainerPortMappingType": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "Default",
            "PlatformProxy"
          ],
          "enum": [
            "Default",
            "PlatformProxy"
          ]
        },
        "ClientCaptchaInfoModel": {
          "type": "object",
          "description": "Client CAPTCHA information",
          "additionalProperties": false,
          "properties": {
            "type": {
              "description": "Captcha Provider Type",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CaptchaProvider"
                }
              ]
            },
            "siteKey": {
              "type": "string",
              "description": "Site Key"
            }
          }
        },
        "CaptchaProvider": {
          "type": "string",
          "description": "",
          "x-enumNames": [
            "None",
            "HashPow",
            "GoogleRecaptcha",
            "CloudflareTurnstile"
          ],
          "enum": [
            "None",
            "HashPow",
            "GoogleRecaptcha",
            "CloudflareTurnstile"
          ]
        },
        "HashPowChallenge": {
          "type": "object",
          "description": "Hash Pow verification",
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
              "description": "Challenge ID"
            },
            "challenge": {
              "type": "string",
              "description": "Verification challenge"
            },
            "difficulty": {
              "type": "integer",
              "description": "Difficulty coefficient",
              "format": "int32"
            }
          }
        },
        "TeamUpdateModel": {
          "type": "object",
          "description": "Team information update",
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string",
              "description": "Team name",
              "maxLength": 20,
              "nullable": true
            },
            "bio": {
              "type": "string",
              "description": "Team bio",
              "maxLength": 72,
              "nullable": true
            }
          }
        },
        "TeamTransferModel": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "newCaptainId"
          ],
          "properties": {
            "newCaptainId": {
              "type": "string",
              "description": "New captain ID",
              "format": "guid",
              "minLength": 1
            }
          }
        },
        "SignatureVerifyModel": {
          "type": "object",
          "description": "Signature verification",
          "additionalProperties": false,
          "required": [
            "teamToken",
            "publicKey"
          ],
          "properties": {
            "teamToken": {
              "type": "string",
              "description": "Team token",
              "minLength": 1
            },
            "publicKey": {
              "type": "string",
              "description": "Game public key, Base64 encoded",
              "minLength": 1
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Account",
        "description": "User account related APIs"
      },
      {
        "name": "Admin",
        "description": "Administration APIs"
      },
      {
        "name": "Assets",
        "description": "File APIs"
      },
      {
        "name": "Edit",
        "description": "Data Modification APIs"
      },
      {
        "name": "Game",
        "description": "Game related APIs"
      },
      {
        "name": "Info",
        "description": "Global Information APIs"
      },
      {
        "name": "Proxy",
        "description": "Container TCP traffic proxy and logging APIs"
      },
      {
        "name": "Team",
        "description": "Team related APIs"
      }
    ]
  }